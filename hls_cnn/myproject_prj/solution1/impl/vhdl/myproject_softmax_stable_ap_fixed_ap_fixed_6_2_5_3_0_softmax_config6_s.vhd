-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_softmax_stable_ap_fixed_ap_fixed_6_2_5_3_0_softmax_config6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_0_ap_vld : OUT STD_LOGIC;
    layer6_out_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_1_ap_vld : OUT STD_LOGIC;
    layer6_out_2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_2_ap_vld : OUT STD_LOGIC;
    layer6_out_3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_3_ap_vld : OUT STD_LOGIC;
    layer6_out_4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_4_ap_vld : OUT STD_LOGIC;
    layer6_out_5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_5_ap_vld : OUT STD_LOGIC;
    layer6_out_6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_6_ap_vld : OUT STD_LOGIC;
    layer6_out_7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_7_ap_vld : OUT STD_LOGIC;
    layer6_out_8 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_8_ap_vld : OUT STD_LOGIC;
    layer6_out_9 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer6_out_9_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject_softmax_stable_ap_fixed_ap_fixed_6_2_5_3_0_softmax_config6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_ce, ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_ce, ap_block_state1)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_const_boolean_1 = ap_block_state1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_0 <= ap_const_lv6_1;

    layer6_out_0_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_1 <= ap_const_lv6_1;

    layer6_out_1_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_2 <= ap_const_lv6_1;

    layer6_out_2_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_3 <= ap_const_lv6_1;

    layer6_out_3_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_4 <= ap_const_lv6_1;

    layer6_out_4_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_5 <= ap_const_lv6_1;

    layer6_out_5_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_5_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_6 <= ap_const_lv6_1;

    layer6_out_6_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_6_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_7 <= ap_const_lv6_1;

    layer6_out_7_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_7_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_8 <= ap_const_lv6_1;

    layer6_out_8_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_8_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer6_out_9 <= ap_const_lv6_1;

    layer6_out_9_ap_vld_assign_proc : process(ap_ce, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then 
            layer6_out_9_ap_vld <= ap_const_logic_1;
        else 
            layer6_out_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;

// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_softmax_stable_ap_fixed_ap_fixed_6_2_5_3_0_softmax_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_ce,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        layer6_out_0,
        layer6_out_0_ap_vld,
        layer6_out_1,
        layer6_out_1_ap_vld,
        layer6_out_2,
        layer6_out_2_ap_vld,
        layer6_out_3,
        layer6_out_3_ap_vld,
        layer6_out_4,
        layer6_out_4_ap_vld,
        layer6_out_5,
        layer6_out_5_ap_vld,
        layer6_out_6,
        layer6_out_6_ap_vld,
        layer6_out_7,
        layer6_out_7_ap_vld,
        layer6_out_8,
        layer6_out_8_ap_vld,
        layer6_out_9,
        layer6_out_9_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
input   ap_ce;
output   ap_idle;
output   ap_ready;
input  [5:0] p_read;
input  [5:0] p_read1;
input  [5:0] p_read2;
input  [5:0] p_read3;
input  [5:0] p_read4;
input  [5:0] p_read5;
input  [5:0] p_read6;
input  [5:0] p_read7;
input  [5:0] p_read8;
input  [5:0] p_read9;
output  [5:0] layer6_out_0;
output   layer6_out_0_ap_vld;
output  [5:0] layer6_out_1;
output   layer6_out_1_ap_vld;
output  [5:0] layer6_out_2;
output   layer6_out_2_ap_vld;
output  [5:0] layer6_out_3;
output   layer6_out_3_ap_vld;
output  [5:0] layer6_out_4;
output   layer6_out_4_ap_vld;
output  [5:0] layer6_out_5;
output   layer6_out_5_ap_vld;
output  [5:0] layer6_out_6;
output   layer6_out_6_ap_vld;
output  [5:0] layer6_out_7;
output   layer6_out_7_ap_vld;
output  [5:0] layer6_out_8;
output   layer6_out_8_ap_vld;
output  [5:0] layer6_out_9;
output   layer6_out_9_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer6_out_0_ap_vld;
reg layer6_out_1_ap_vld;
reg layer6_out_2_ap_vld;
reg layer6_out_3_ap_vld;
reg layer6_out_4_ap_vld;
reg layer6_out_5_ap_vld;
reg layer6_out_6_ap_vld;
reg layer6_out_7_ap_vld;
reg layer6_out_8_ap_vld;
reg layer6_out_9_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (1'b1 == ap_block_state1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_0_ap_vld = 1'b1;
    end else begin
        layer6_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_1_ap_vld = 1'b1;
    end else begin
        layer6_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_2_ap_vld = 1'b1;
    end else begin
        layer6_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_3_ap_vld = 1'b1;
    end else begin
        layer6_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_4_ap_vld = 1'b1;
    end else begin
        layer6_out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_5_ap_vld = 1'b1;
    end else begin
        layer6_out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_6_ap_vld = 1'b1;
    end else begin
        layer6_out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_7_ap_vld = 1'b1;
    end else begin
        layer6_out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_8_ap_vld = 1'b1;
    end else begin
        layer6_out_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer6_out_9_ap_vld = 1'b1;
    end else begin
        layer6_out_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign layer6_out_0 = 6'd1;

assign layer6_out_1 = 6'd1;

assign layer6_out_2 = 6'd1;

assign layer6_out_3 = 6'd1;

assign layer6_out_4 = 6'd1;

assign layer6_out_5 = 6'd1;

assign layer6_out_6 = 6'd1;

assign layer6_out_7 = 6'd1;

assign layer6_out_8 = 6'd1;

assign layer6_out_9 = 6'd1;

endmodule //myproject_softmax_stable_ap_fixed_ap_fixed_6_2_5_3_0_softmax_config6_s
